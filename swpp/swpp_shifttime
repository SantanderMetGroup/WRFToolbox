#! /bin/bash
use cdo
#use netcdf
use nco

function usage(){
  cat << End_of_help
    Usage: swpp_shifttime [options]

    --input, i
      Input files and (optionally) number of files to skip and maximum
      number of files to process.
      This flag can appear as many times as necessary to include all
      the files to be processed:

      -i '/path/to/files/filename_??????_var.nc':12:24
      
      Path expansion by the shell must be protected by using single
      quotes: '

    --dry-run, -n
      Just show the files that would be processed and exit

    --help, -h
      Print this help message
End_of_help
}

#####################################################################
#
#  Option parser
#
#  Try to get the configuration from the environment and the command
#  line.
#
#####################################################################
tmpdirbase=${SWPP_TEMPORARY_STORAGE}
xnjtable=${SWPP_WRFNCXNJ_TABLE}
xnjgattr=${SWPP_WRFNCXNJ_GATTR}
attributes=${SWPP_NETCDF_ATTRIBUTES}

input=""
is_dry=0
shifttime="0"
leftbnd="0"
rightbnd="0"
while test -n "$1"; do
  case "$1" in
    --left-bound|-l) leftbnd=$2; shift ;;
    --right-bound|-r) rightbnd="$2"; shift ;;
    --shift-time|-s) shifttime="$2"; shift ;;
    --variables|-v) vars="$2"; shift ;;
    --cell-method|-c) cellmethod="$2"; shift ;;
    --temporary-storage|-t) tmpdirbase=$2; shift ;;
    --input|-i) input="${input},$2"; shift ;;
    --dry-run|-n) is_dry=1 ;;
    --help|-h) usage; exit ;;
    *) echo "Unknown option: $1"; exit ;;
  esac
  shift
done
#####################################################################
#
#  Functions
#
#####################################################################

function print_config(){
  # Prints the configuration options taken from the environment
  # or command line
  cat << End_of_conf
  SWPP_TEMPORARY_STORAGE (--temporary-storage)
    ${tmpdirbase}
  --input
    ${input} 
End_of_conf
}

function ipcc_varname() {
  var=$1
  table=$2
  cat ${table} | awk  '{FS="[ \t]*;[ \t]*"; OFS=";"}; $1 == "'${var}'" {print $2}'
}

function var_longname() {
  var=$1
  table=$2
  cat ${table} | awk  '{FS="[ \t]*;[ \t]*"; OFS=";"}; $1 == "'${var}'" {print $3}'
}

function var_stdname() {
  var=$1
  table=$2
  cat ${table} | awk  '{FS="[ \t]*;[ \t]*"; OFS=";"}; $1 == "'${var}'" {print $4}'
}

function ncatted_global_att() {
  cat ${xnjgattr} | while read a val; do echo "-a ${a},global,o,c,$val "; done
}

#####################################################################
#
#  Main program
#
#####################################################################

scriptdir=$( (cd `dirname $0` && echo $PWD) )
thisdir=$(pwd)
#
#  Get a private space to run
#
if test -n "${tmpdirbase}"; then
  tmpdir=${tmpdirbase}/tmpdir.`date +%Y%m%d%H%M%S%n`
else
  tmpdir=${thisdir}/tmpdir.`date +%Y%m%d%H%M%S%n`
fi
mkdir -p ${tmpdir} && cd ${tmpdir} || exit

print_config
#
#   Get file list
#
rm -f cache.filelist
for ifiles_skipfiles_maxfiles in ${input//,/ }; do
  read ifiles skipfiles maxfiles <<< ${ifiles_skipfiles_maxfiles//:/ }
  if test -n "${skipfiles}"; then
    eval \ls ${ifiles} | awk 'NR>'${skipfiles}' ' | head -n ${maxfiles} >> cache.filelist
  else
    eval \ls ${ifiles} >> cache.filelist
  fi
done

if test ${is_dry} -eq 1; then
  echo "Files to process:"
  cat cache.filelist
  exit
fi
if test -n "${chname}"; then
  cdooperator="${cdooperator} -chname,${chname}"
fi
#
#   Create auxiliary netcdf files
#
ncgen < ${attributes} # --> attributes.nc
(
  echo "netcdf gattr {"
  cat ${xnjgattr} | while read key val; do echo "  :${key} = ${val} ;"; done
  echo "}"
) | ncgen             # --> gattr.nc
#
#   Main loop
#
cat cache.filelist | while read ncfile; do
  if ncdump -h ${ncfile} | grep -q SWPP_SHIFTTIME; then
    echo "${ncfile} was already processed by swpp_shifttime !!"
    echo "Unexpected results may occur by a second processing! I'm not touching this file."
    continue
  fi
  if test "${shifttime}" != "0"; then
    cdo shifttime,${shifttime} ${ncfile} s1
    mv s1 ${ncfile}
  fi
  if test "${leftbnd}" != "0" -o "${rightbnd}" != "0"; then
    # NCO code by G. Nikulin, SMHI
    test -f bnds_file.nc && rm bnds_file.nc
    ncap2 -v -h -O -s 'defdim("bnds",2); time_bnds[$time, bnds]=0.; time_bnds(:, 0)=time-'${leftbnd}'; time_bnds(:, 1)=time+'${rightbnd}';' ${ncfile} bnds_file.nc
    ncks -A -a -v time_bnds -h bnds_file.nc ${ncfile}
    ncatted -h -a long_name,time_bnds,o,c,"time bounds" -a bounds,time,o,c,"time_bnds" ${ncfile}
  fi
  for xnjvar in ${vars//,/ }; do
    var=$(ipcc_varname $xnjvar $xnjtable)
    ncatted -h \
      -a cell_method,${var},o,c,"${cellmethod}" \
      -a long_name,${var},o,c,"$(var_longname $xnjvar $xnjtable)" \
      -a standard_name,${var},o,c,"$(var_stdname $xnjvar $xnjtable)" \
      ${ncfile}
  done # var
  #ncatted -h -a NCO,global,d,, -a CDI,global,d,, -a CDO,global,d,, -a history,global,d,, ${ncfile}
  cdo setreftime,1949-12-01,00:00 ${ncfile} s2
  mv s2 ${ncfile}
  ncatted -h -a ,global,d,, ${ncfile}     # Borro todos los atributos globales (en el post1 se habian puesto unos mal)
  ncatted -h -a SWPP_SHIFTTIME,global,o,c,"shift: ${shifttime}, left: ${leftbnd}, right: ${rightbnd}" ${ncfile}
  ncatted -h -a creation_date,global,a,c,"`date +%Y-%m-%d-T%H:%M:%SZ`" ${ncfile}
  ncks -h -A attributes.nc ${ncfile}
  ncks -h -A gattr.nc ${ncfile}
done # ncfile
